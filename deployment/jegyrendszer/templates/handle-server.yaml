apiVersion: apps/v1
kind: Deployment
metadata:
  name: handle-server-deployment
  labels:
    app: handle-server
    pod-security.kubernetes.io/audit: baseline
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "3001"
spec:
  replicas: {{.Values.replication.handle}}
  selector:
    matchLabels:
      app: handle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: handle-server
    spec:
      serviceAccountName: handle-svc-a
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: handle-server-volume
        persistentVolumeClaim:
          claimName: backend-uploads-pvc
      - name: handle-server-config
        configMap:
          name: backend-configmap
      containers:
      - name: handle-server
        image: "europe-west3-docker.pkg.dev/agora-jegyrendszer/jegyrendszer/handle-server:{{.Values.versions.handle_tag}}"
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        ports:
        - containerPort: 3001
          name: backend-open
        env:
        - name: CONFIGDIR
          value: "/etc/config"
        - name: NODE_ENV
          value: "production"
        - name: LOKI_URL
          value: "http://localhost:3100" #! CHANGE
        - name: TZ
          value: "Europe/Vienna"
        - name: REDIS_PASS
          value: "root"
          # valueFrom:
          #   secretKeyRef:
          #     name: handle-server-secretmap
          #     key: REDIS_PASS
        volumeMounts:
        - name: handle-server-volume
          mountPath: /uploads
        - name: handle-server-config
          mountPath: /etc/config
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 30
        securityContext:
          # runAsNonRoot: true
          allowPrivilegeEscalation: false
      hostAliases:
      - ip: "10.10.10.111"
        hostnames:
        - "api.jegyrendszer.local"
---
apiVersion: v1
kind: Secret
metadata:
  name: handle-server-secretmap
type: Opaque
data:
  SLACK_TOKEN: eG94cC0zMzExNTU0NTgyNzc1LTMzMjYxNDk0ODU2MDItNTU1ODEzMjQ4MDgxNi1iOTlmZWVhYjA3Y2M2MTM0MzYwZjllNDgwMGM5ZDE4Ygo=
  REDIS_PASS: cm9vdAo=
  APPLE_PASS_IDENTIFIER: ""
  MERCHANT: ""
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-uploads-pvc
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: {{.Values.handle.storageClass}}
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: handle-server-service
  annotations:
    traefik.ingress.kubernetes.io/service.sticky.cookie: "true"
    traefik.ingress.kubernetes.io/service.sticky.cookie.name: server_id
    traefik.ingress.kubernetes.io/service.sticky.cookie.httponly: "true"
spec:
  selector:
    app: handle-server
  ports:
  - protocol: TCP
    port: 3001
    targetPort: backend-open
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: handle-server-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
    traefik.ingress.kubernetes.io/router.middlewares: kube-system-ratelimit-middleware@kubernetescrd
spec:
  rules:
    - host: api.jegyrendszer.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: handle-server-service
                port:
                  number: 3001
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: handle-svc-a
  namespace: default